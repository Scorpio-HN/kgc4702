NettyPool create channel to transactionRole:RMROLE,address:192.168.88.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
ChannelHandlerContext(RmRpcClient#0, [id: 0x29e9f12f]) will closed
0304 register RM failed.
io.seata.common.exception.FrameworkException: can not connect to services-server.
	at io.seata.core.rpc.netty.RpcClientBootstrap.getNewChannel(RpcClientBootstrap.java:195)
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:58)
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:34)
	at org.apache.commons.pool.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:1220)
	at io.seata.core.rpc.netty.NettyClientChannelManager.doConnect(NettyClientChannelManager.java:206)
	at io.seata.core.rpc.netty.NettyClientChannelManager.acquireChannel(NettyClientChannelManager.java:103)
	at io.seata.core.rpc.netty.NettyClientChannelManager.reconnect(NettyClientChannelManager.java:175)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient$1.run(AbstractRpcRemotingClient.java:112)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
Caused by: io.seata.common.exception.FrameworkException: connect failed, can not connect to services-server.
	at io.seata.core.rpc.netty.RpcClientBootstrap.getNewChannel(RpcClientBootstrap.java:190)
	... 15 common frames omitted
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: /192.168.88.1:8091
Caused by: java.net.ConnectException: Connection refused: no further information
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(Unknown Source)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:330)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:334)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
0101 can not connect to 192.168.88.1:8091 cause:can not register RM,err:can not connect to services-server.
io.seata.common.exception.FrameworkException: can not register RM,err:can not connect to services-server.
	at io.seata.core.rpc.netty.NettyClientChannelManager.doConnect(NettyClientChannelManager.java:210)
	at io.seata.core.rpc.netty.NettyClientChannelManager.acquireChannel(NettyClientChannelManager.java:103)
	at io.seata.core.rpc.netty.NettyClientChannelManager.reconnect(NettyClientChannelManager.java:175)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient$1.run(AbstractRpcRemotingClient.java:112)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
will connect to 192.168.88.1:8091
RM will register :jdbc:mysql:///seata_order
NettyPool create channel to transactionRole:RMROLE,address:192.168.88.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
wait response error:cost 30010 ms,ip:null,request:RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'}
0304 register RM failed.
io.seata.common.exception.FrameworkException: register error,role:TMROLE,err:cost 30010 ms
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:78)
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:34)
	at org.apache.commons.pool.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:1220)
	at io.seata.core.rpc.netty.NettyClientChannelManager.doConnect(NettyClientChannelManager.java:206)
	at io.seata.core.rpc.netty.NettyClientChannelManager.acquireChannel(NettyClientChannelManager.java:103)
	at io.seata.core.rpc.netty.NettyClientChannelManager.reconnect(NettyClientChannelManager.java:175)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient$1.run(AbstractRpcRemotingClient.java:112)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
channel valid false,channel:[id: 0xcda8ee3f, L:/192.168.88.1:51965 ! R:/192.168.88.1:8091]
0101 can not connect to 192.168.88.1:8091 cause:can not register RM,err:register error,role:TMROLE,err:cost 30010 ms
io.seata.common.exception.FrameworkException: can not register RM,err:register error,role:TMROLE,err:cost 30010 ms
	at io.seata.core.rpc.netty.NettyClientChannelManager.doConnect(NettyClientChannelManager.java:210)
	at io.seata.core.rpc.netty.NettyClientChannelManager.acquireChannel(NettyClientChannelManager.java:103)
	at io.seata.core.rpc.netty.NettyClientChannelManager.reconnect(NettyClientChannelManager.java:175)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient$1.run(AbstractRpcRemotingClient.java:112)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
will destroy channel:[id: 0xcda8ee3f, L:/192.168.88.1:51965 ! R:/192.168.88.1:8091]
ChannelHandlerContext(TmRpcClient#0, [id: 0xcda8ee3f, L:/192.168.88.1:51965 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(TmRpcClient#0, [id: 0xcda8ee3f, L:/192.168.88.1:51965 ! R:/192.168.88.1:8091]) will closed
channel inactive: [id: 0xcda8ee3f, L:/192.168.88.1:51965 ! R:/192.168.88.1:8091]
will connect to 192.168.88.1:8091
channel valid false,channel:[id: 0xcda8ee3f, L:/192.168.88.1:51965 ! R:/192.168.88.1:8091]
will destroy channel:[id: 0xcda8ee3f, L:/192.168.88.1:51965 ! R:/192.168.88.1:8091]
ChannelHandlerContext(TmRpcClient#0, [id: 0xcda8ee3f, L:/192.168.88.1:51965 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(TmRpcClient#0, [id: 0xcda8ee3f, L:/192.168.88.1:51965 ! R:/192.168.88.1:8091]) will closed
NettyPool create channel to transactionRole:TMROLE,address:192.168.88.1:8091,msg:< RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
ChannelHandlerContext(RmRpcClient#0, [id: 0x77e0f8fe]) will closed
0304 register RM failed.
io.seata.common.exception.FrameworkException: can not connect to services-server.
	at io.seata.core.rpc.netty.RpcClientBootstrap.getNewChannel(RpcClientBootstrap.java:195)
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:58)
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:34)
	at org.apache.commons.pool.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:1220)
	at io.seata.core.rpc.netty.NettyClientChannelManager.doConnect(NettyClientChannelManager.java:206)
	at io.seata.core.rpc.netty.NettyClientChannelManager.acquireChannel(NettyClientChannelManager.java:103)
	at io.seata.core.rpc.netty.NettyClientChannelManager.reconnect(NettyClientChannelManager.java:175)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient$1.run(AbstractRpcRemotingClient.java:112)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
Caused by: io.seata.common.exception.FrameworkException: connect failed, can not connect to services-server.
	at io.seata.core.rpc.netty.RpcClientBootstrap.getNewChannel(RpcClientBootstrap.java:190)
	... 15 common frames omitted
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: /192.168.88.1:8091
Caused by: java.net.ConnectException: Connection refused: no further information
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(Unknown Source)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:330)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:334)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
0101 can not connect to 192.168.88.1:8091 cause:can not register RM,err:can not connect to services-server.
io.seata.common.exception.FrameworkException: can not register RM,err:can not connect to services-server.
	at io.seata.core.rpc.netty.NettyClientChannelManager.doConnect(NettyClientChannelManager.java:210)
	at io.seata.core.rpc.netty.NettyClientChannelManager.acquireChannel(NettyClientChannelManager.java:103)
	at io.seata.core.rpc.netty.NettyClientChannelManager.reconnect(NettyClientChannelManager.java:175)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient$1.run(AbstractRpcRemotingClient.java:112)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
will connect to 192.168.88.1:8091
RM will register :jdbc:mysql:///seata_order
NettyPool create channel to transactionRole:RMROLE,address:192.168.88.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
ChannelHandlerContext(TmRpcClient#0, [id: 0x38848296]) will closed
0304 register RM failed.
io.seata.common.exception.FrameworkException: can not connect to services-server.
	at io.seata.core.rpc.netty.RpcClientBootstrap.getNewChannel(RpcClientBootstrap.java:195)
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:58)
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:34)
	at org.apache.commons.pool.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:1220)
	at io.seata.core.rpc.netty.NettyClientChannelManager.doConnect(NettyClientChannelManager.java:206)
	at io.seata.core.rpc.netty.NettyClientChannelManager.acquireChannel(NettyClientChannelManager.java:103)
	at io.seata.core.rpc.netty.NettyClientChannelManager.reconnect(NettyClientChannelManager.java:175)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient$1.run(AbstractRpcRemotingClient.java:112)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
Caused by: io.seata.common.exception.FrameworkException: connect failed, can not connect to services-server.
	at io.seata.core.rpc.netty.RpcClientBootstrap.getNewChannel(RpcClientBootstrap.java:190)
	... 15 common frames omitted
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: /192.168.88.1:8091
Caused by: java.net.ConnectException: Connection refused: no further information
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(Unknown Source)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:330)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:334)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
0101 can not connect to 192.168.88.1:8091 cause:can not register RM,err:can not connect to services-server.
io.seata.common.exception.FrameworkException: can not register RM,err:can not connect to services-server.
	at io.seata.core.rpc.netty.NettyClientChannelManager.doConnect(NettyClientChannelManager.java:210)
	at io.seata.core.rpc.netty.NettyClientChannelManager.acquireChannel(NettyClientChannelManager.java:103)
	at io.seata.core.rpc.netty.NettyClientChannelManager.reconnect(NettyClientChannelManager.java:175)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient$1.run(AbstractRpcRemotingClient.java:112)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
will connect to 192.168.88.1:8091
NettyPool create channel to transactionRole:TMROLE,address:192.168.88.1:8091,msg:< RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
register success, cost 74 ms, version:1.0.0,role:TMROLE,channel:[id: 0x6ca5a28d, L:/192.168.88.1:52115 - R:/192.168.88.1:8091]
register RM success. server version:1.0.0,channel:[id: 0xa380c7e6, L:/192.168.88.1:52113 - R:/192.168.88.1:8091]
register success, cost 7 ms, version:1.0.0,role:RMROLE,channel:[id: 0xa380c7e6, L:/192.168.88.1:52113 - R:/192.168.88.1:8091]
HV000001: Hibernate Validator 6.0.21.Final
No active profile set, falling back to default profiles: default
BeanFactory id=ae6fb061-e115-313f-925b-40d30572bd04
Bean 'com.cssl.feign.FeignAccountClient' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'spring.cloud.alibaba.seata-io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration' of type [io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataProperties' of type [io.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'io.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [io.seata.spring.boot.autoconfigure.SeataAutoConfiguration$$EnhancerBySpringCGLIB$$100b4c0b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'springUtils' of type [io.seata.spring.boot.autoconfigure.util.SpringUtils] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Automatically configure Seata
The file name of the operation is registry.conf
load ExtConfigurationProvider[null] extension by class[io.seata.spring.boot.autoconfigure.provider.SpringBootConfigurationProvider]
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'configProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'configFileProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigFileProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
The file name of the operation is file.conf
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'serviceProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ServiceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Initializing Global Transaction Clients ... 
Could not found property transport.thread-factory.boss-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.worker-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.share-boss-worker, try to use default value instead.
Bean 'transportProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.TransportProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Could not found property transport.thread-factory.worker-thread-size, try to use default value instead.
RpcClientBootstrap has started
Transaction Manager Client is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Bean 'clientProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ClientProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Async Commit Buffer Limit: 10000
RpcClientBootstrap has started
Resource Manager is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Global Transaction Clients are initialized. 
Bean 'com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration' of type [com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataFeignObjectWrapper' of type [com.alibaba.cloud.seata.feign.SeataFeignObjectWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8111 (http)
Initializing ProtocolHandler ["http-nio-8111"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.39]
Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1404 ms
{dataSource-1} inited
load RegistryProvider[Nacos] extension by class[io.seata.discovery.registry.nacos.NacosRegistryProvider]
will connect to 192.168.88.1:8091
RM will register :jdbc:mysql:///seata_order
NettyPool create channel to transactionRole:RMROLE,address:192.168.88.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
load Codec[SEATA] extension by class[io.seata.codec.seata.SeataCodec]
register RM success. server version:1.0.0,channel:[id: 0x33603b1f, L:/192.168.88.1:52174 - R:/192.168.88.1:8091]
register success, cost 47 ms, version:1.0.0,role:RMROLE,channel:[id: 0x33603b1f, L:/192.168.88.1:52174 - R:/192.168.88.1:8091]
Bean[com.cssl.service.impl.OrderServiceImpl$$EnhancerBySpringCGLIB$$ee011c85] with name [orderServiceImpl] would use interceptor [io.seata.spring.annotation.GlobalTransactionalInterceptor]
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
Initializing ExecutorService 'applicationTaskExecutor'
Initializing ExecutorService 'Nacso-Watch-Task-Scheduler'
Starting ProtocolHandler ["http-nio-8111"]
Tomcat started on port(s): 8111 (http) with context path ''
nacos registry, DEFAULT_GROUP seata-order 172.17.2.52:8111 register finished
Started NacosSeataOrderApplication in 7.787 seconds (JVM running for 8.814)
will connect to 192.168.88.1:8091
NettyPool create channel to transactionRole:TMROLE,address:192.168.88.1:8091,msg:< RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
register success, cost 52 ms, version:1.0.0,role:TMROLE,channel:[id: 0xe0a5dfd7, L:/192.168.88.1:52185 - R:/192.168.88.1:8091]
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 4 ms
load ContextCore[null] extension by class[io.seata.core.context.ThreadLocalContextCore]
load TransactionManager[null] extension by class[io.seata.tm.DefaultTransactionManager]
TransactionManager Singleton io.seata.tm.DefaultTransactionManager@3a54bfe3
load LoadBalance[null] extension by class[io.seata.discovery.loadbalance.RandomLoadBalance]
Begin new global transaction [192.168.88.1:8091:2074966272]
====开始新增订单====
====结束新增订单====
====开始修改账户====
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Client: seata-account instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=seata-account,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
Using serverListUpdater PollingServerListUpdater
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
DynamicServerListLoadBalancer for client seata-account initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=seata-account,current list of Servers=[172.17.2.52:7111],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:172.17.2.52:7111;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 GMT+08:00 1970;	First connection made: Thu Jan 01 08:00:00 GMT+08:00 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@45dda5a9
====结束修改账户====
[192.168.88.1:8091:2074966272] rollback status: Rollbacked
Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArithmeticException: / by zero] with root cause
java.lang.ArithmeticException: / by zero
	at com.cssl.service.impl.OrderServiceImpl.saveOrder(OrderServiceImpl.java:36)
	at com.cssl.service.impl.OrderServiceImpl$$FastClassBySpringCGLIB$$ff30dd24.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionInterceptor$$Lambda$571/450322912.proceedWithInvocation(Unknown Source)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at io.seata.spring.annotation.GlobalTransactionalInterceptor$1.execute(GlobalTransactionalInterceptor.java:109)
	at io.seata.tm.api.TransactionalTemplate.execute(TransactionalTemplate.java:64)
	at io.seata.spring.annotation.GlobalTransactionalInterceptor.handleGlobalTransaction(GlobalTransactionalInterceptor.java:106)
	at io.seata.spring.annotation.GlobalTransactionalInterceptor.invoke(GlobalTransactionalInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.cssl.service.impl.OrderServiceImpl$$EnhancerBySpringCGLIB$$ee011c85.saveOrder(<generated>)
	at com.cssl.controller.OrderController.takeOrder(OrderController.java:19)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
HV000001: Hibernate Validator 6.0.21.Final
No active profile set, falling back to default profiles: default
BeanFactory id=ae6fb061-e115-313f-925b-40d30572bd04
Bean 'com.cssl.feign.FeignAccountClient' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'spring.cloud.alibaba.seata-io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration' of type [io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataProperties' of type [io.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'io.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [io.seata.spring.boot.autoconfigure.SeataAutoConfiguration$$EnhancerBySpringCGLIB$$969f5268] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'springUtils' of type [io.seata.spring.boot.autoconfigure.util.SpringUtils] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Automatically configure Seata
The file name of the operation is registry.conf
load ExtConfigurationProvider[null] extension by class[io.seata.spring.boot.autoconfigure.provider.SpringBootConfigurationProvider]
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'configProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'configFileProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigFileProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
The file name of the operation is file.conf
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'serviceProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ServiceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Initializing Global Transaction Clients ... 
Could not found property transport.thread-factory.boss-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.worker-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.share-boss-worker, try to use default value instead.
Bean 'transportProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.TransportProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Could not found property transport.thread-factory.worker-thread-size, try to use default value instead.
RpcClientBootstrap has started
Transaction Manager Client is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Bean 'clientProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ClientProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Async Commit Buffer Limit: 10000
RpcClientBootstrap has started
Resource Manager is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Global Transaction Clients are initialized. 
Bean 'com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration' of type [com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataFeignObjectWrapper' of type [com.alibaba.cloud.seata.feign.SeataFeignObjectWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8111 (http)
Initializing ProtocolHandler ["http-nio-8111"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.39]
Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1213 ms
{dataSource-1} inited
load RegistryProvider[Nacos] extension by class[io.seata.discovery.registry.nacos.NacosRegistryProvider]
will connect to 192.168.88.1:8091
RM will register :jdbc:mysql:///seata_order
NettyPool create channel to transactionRole:RMROLE,address:192.168.88.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
load Codec[SEATA] extension by class[io.seata.codec.seata.SeataCodec]
register RM success. server version:1.0.0,channel:[id: 0x7e8c7b4e, L:/192.168.88.1:52414 - R:/192.168.88.1:8091]
register success, cost 52 ms, version:1.0.0,role:RMROLE,channel:[id: 0x7e8c7b4e, L:/192.168.88.1:52414 - R:/192.168.88.1:8091]
Bean[com.cssl.service.impl.OrderServiceImpl$$EnhancerBySpringCGLIB$$3bf7cbc7] with name [orderServiceImpl] would use interceptor [io.seata.spring.annotation.GlobalTransactionalInterceptor]
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
Initializing ExecutorService 'applicationTaskExecutor'
Initializing ExecutorService 'Nacso-Watch-Task-Scheduler'
Starting ProtocolHandler ["http-nio-8111"]
Tomcat started on port(s): 8111 (http) with context path ''
nacos registry, DEFAULT_GROUP seata-order 172.17.2.52:8111 register finished
Started NacosSeataOrderApplication in 7.641 seconds (JVM running for 8.743)
will connect to 192.168.88.1:8091
NettyPool create channel to transactionRole:TMROLE,address:192.168.88.1:8091,msg:< RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
register success, cost 6 ms, version:1.0.0,role:TMROLE,channel:[id: 0xa78c8fc8, L:/192.168.88.1:52428 - R:/192.168.88.1:8091]
onMessage:UndoLogDeleteRequest{resourceId='jdbc:mysql:///seata_order', saveDays=7, branchType=AT}
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 6 ms
load ContextCore[null] extension by class[io.seata.core.context.ThreadLocalContextCore]
load TransactionManager[null] extension by class[io.seata.tm.DefaultTransactionManager]
TransactionManager Singleton io.seata.tm.DefaultTransactionManager@74b28c23
load LoadBalance[null] extension by class[io.seata.discovery.loadbalance.RandomLoadBalance]
Begin new global transaction [192.168.88.1:8091:2074966274]
====开始新增订单====
====结束新增订单====
channel [id: 0xa78c8fc8, L:/192.168.88.1:52428 - R:/192.168.88.1:8091] read idle.
channel [id: 0x7e8c7b4e, L:/192.168.88.1:52414 - R:/192.168.88.1:8091] read idle.
will destroy channel:[id: 0xa78c8fc8, L:/192.168.88.1:52428 - R:/192.168.88.1:8091]
====开始修改账户====
will destroy channel:[id: 0x7e8c7b4e, L:/192.168.88.1:52414 - R:/192.168.88.1:8091]
ChannelHandlerContext(TmRpcClient#0, [id: 0xa78c8fc8, L:/192.168.88.1:52428 - R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(RmRpcClient#0, [id: 0x7e8c7b4e, L:/192.168.88.1:52414 - R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(TmRpcClient#0, [id: 0xa78c8fc8, L:/192.168.88.1:52428 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(RmRpcClient#0, [id: 0x7e8c7b4e, L:/192.168.88.1:52414 ! R:/192.168.88.1:8091]) will closed
return to pool, rm channel:[id: 0xa78c8fc8, L:/192.168.88.1:52428 ! R:/192.168.88.1:8091]
return to pool, rm channel:[id: 0x7e8c7b4e, L:/192.168.88.1:52414 ! R:/192.168.88.1:8091]
channel valid false,channel:[id: 0xa78c8fc8, L:/192.168.88.1:52428 ! R:/192.168.88.1:8091]
channel valid false,channel:[id: 0x7e8c7b4e, L:/192.168.88.1:52414 ! R:/192.168.88.1:8091]
will destroy channel:[id: 0xa78c8fc8, L:/192.168.88.1:52428 ! R:/192.168.88.1:8091]
ChannelHandlerContext(TmRpcClient#0, [id: 0xa78c8fc8, L:/192.168.88.1:52428 ! R:/192.168.88.1:8091]) will closed
will destroy channel:[id: 0x7e8c7b4e, L:/192.168.88.1:52414 ! R:/192.168.88.1:8091]
ChannelHandlerContext(TmRpcClient#0, [id: 0xa78c8fc8, L:/192.168.88.1:52428 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(RmRpcClient#0, [id: 0x7e8c7b4e, L:/192.168.88.1:52414 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(RmRpcClient#0, [id: 0x7e8c7b4e, L:/192.168.88.1:52414 ! R:/192.168.88.1:8091]) will closed
channel inactive: [id: 0xa78c8fc8, L:/192.168.88.1:52428 ! R:/192.168.88.1:8091]
channel inactive: [id: 0x7e8c7b4e, L:/192.168.88.1:52414 ! R:/192.168.88.1:8091]
channel valid false,channel:[id: 0x7e8c7b4e, L:/192.168.88.1:52414 ! R:/192.168.88.1:8091]
channel valid false,channel:[id: 0xa78c8fc8, L:/192.168.88.1:52428 ! R:/192.168.88.1:8091]
will destroy channel:[id: 0x7e8c7b4e, L:/192.168.88.1:52414 ! R:/192.168.88.1:8091]
will destroy channel:[id: 0xa78c8fc8, L:/192.168.88.1:52428 ! R:/192.168.88.1:8091]
ChannelHandlerContext(RmRpcClient#0, [id: 0x7e8c7b4e, L:/192.168.88.1:52414 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(TmRpcClient#0, [id: 0xa78c8fc8, L:/192.168.88.1:52428 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(RmRpcClient#0, [id: 0x7e8c7b4e, L:/192.168.88.1:52414 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(TmRpcClient#0, [id: 0xa78c8fc8, L:/192.168.88.1:52428 ! R:/192.168.88.1:8091]) will closed
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Client: seata-account instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=seata-account,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
Using serverListUpdater PollingServerListUpdater
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
DynamicServerListLoadBalancer for client seata-account initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=seata-account,current list of Servers=[172.17.2.52:7111],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:172.17.2.52:7111;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 GMT+08:00 1970;	First connection made: Thu Jan 01 08:00:00 GMT+08:00 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@56cdcd0b
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
====结束修改账户====
will connect to 192.168.88.1:8091
NettyPool create channel to transactionRole:TMROLE,address:192.168.88.1:8091,msg:< RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
channel inactive: [id: 0x274a8326, L:0.0.0.0/0.0.0.0:53866 ! R:/192.168.88.1:8091]
channel null is not active after long wait, close it.
will connect to 192.168.88.1:8091
channel null is not active after long wait, close it.
will connect to 192.168.88.1:8091
RM will register :jdbc:mysql:///seata_order
NettyPool create channel to transactionRole:RMROLE,address:192.168.88.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
channel inactive: [id: 0x4585b26c, L:0.0.0.0/0.0.0.0:53878 ! R:/192.168.88.1:8091]
wait response error:cost 30014 ms,ip:null,request:RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'}
0304 register RM failed.
io.seata.common.exception.FrameworkException: register error,role:TMROLE,err:cost 30014 ms
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:78)
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:34)
	at org.apache.commons.pool.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:1220)
	at io.seata.core.rpc.netty.NettyClientChannelManager.doConnect(NettyClientChannelManager.java:206)
	at io.seata.core.rpc.netty.NettyClientChannelManager.acquireChannel(NettyClientChannelManager.java:103)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient.sendMsgWithResponse(AbstractRpcRemotingClient.java:229)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient.sendMsgWithResponse(AbstractRpcRemotingClient.java:236)
	at io.seata.tm.DefaultTransactionManager.syncCall(DefaultTransactionManager.java:95)
	at io.seata.tm.DefaultTransactionManager.rollback(DefaultTransactionManager.java:72)
	at io.seata.tm.api.DefaultGlobalTransaction.rollback(DefaultGlobalTransaction.java:167)
	at io.seata.tm.api.TransactionalTemplate.rollbackTransaction(TransactionalTemplate.java:114)
	at io.seata.tm.api.TransactionalTemplate.completeTransactionAfterThrowing(TransactionalTemplate.java:88)
	at io.seata.tm.api.TransactionalTemplate.execute(TransactionalTemplate.java:69)
	at io.seata.spring.annotation.GlobalTransactionalInterceptor.handleGlobalTransaction(GlobalTransactionalInterceptor.java:106)
	at io.seata.spring.annotation.GlobalTransactionalInterceptor.invoke(GlobalTransactionalInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.cssl.service.impl.OrderServiceImpl$$EnhancerBySpringCGLIB$$3bf7cbc7.saveOrder(<generated>)
	at com.cssl.controller.OrderController.takeOrder(OrderController.java:19)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
NettyPool create channel to transactionRole:TMROLE,address:192.168.88.1:8091,msg:< RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
Failed to report global rollback [192.168.88.1:8091:2074966274],Retry Countdown: 5, reason: can not register RM,err:register error,role:TMROLE,err:cost 30014 ms
will connect to 192.168.88.1:8091
wait response error:cost 30001 ms,ip:null,request:RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'}
0304 register RM failed.
io.seata.common.exception.FrameworkException: register error,role:RMROLE,err:cost 30001 ms
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:78)
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:34)
	at org.apache.commons.pool.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:1220)
	at io.seata.core.rpc.netty.NettyClientChannelManager.doConnect(NettyClientChannelManager.java:206)
	at io.seata.core.rpc.netty.NettyClientChannelManager.acquireChannel(NettyClientChannelManager.java:103)
	at io.seata.core.rpc.netty.NettyClientChannelManager.reconnect(NettyClientChannelManager.java:175)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient$1.run(AbstractRpcRemotingClient.java:112)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset$$$capture(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
channel valid false,channel:[id: 0x4585b26c, L:0.0.0.0/0.0.0.0:53878 ! R:/192.168.88.1:8091]
0101 can not connect to 192.168.88.1:8091 cause:can not register RM,err:register error,role:RMROLE,err:cost 30001 ms
io.seata.common.exception.FrameworkException: can not register RM,err:register error,role:RMROLE,err:cost 30001 ms
	at io.seata.core.rpc.netty.NettyClientChannelManager.doConnect(NettyClientChannelManager.java:210)
	at io.seata.core.rpc.netty.NettyClientChannelManager.acquireChannel(NettyClientChannelManager.java:103)
	at io.seata.core.rpc.netty.NettyClientChannelManager.reconnect(NettyClientChannelManager.java:175)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient$1.run(AbstractRpcRemotingClient.java:112)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset$$$capture(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
will destroy channel:[id: 0x4585b26c, L:0.0.0.0/0.0.0.0:53878 ! R:/192.168.88.1:8091]
ChannelHandlerContext(RmRpcClient#0, [id: 0x4585b26c, L:0.0.0.0/0.0.0.0:53878 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(RmRpcClient#0, [id: 0x4585b26c, L:0.0.0.0/0.0.0.0:53878 ! R:/192.168.88.1:8091]) will closed
will connect to 192.168.88.1:8091
RM will register :jdbc:mysql:///seata_order
NettyPool create channel to transactionRole:RMROLE,address:192.168.88.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
channel inactive: [id: 0x43f40655, L:0.0.0.0/0.0.0.0:53923 ! R:/192.168.88.1:8091]
0304 register RM failed.
io.seata.common.exception.FrameworkException: can not connect to services-server.
	at io.seata.core.rpc.netty.RpcClientBootstrap.getNewChannel(RpcClientBootstrap.java:195)
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:58)
	at io.seata.core.rpc.netty.NettyPoolableFactory.makeObject(NettyPoolableFactory.java:34)
	at org.apache.commons.pool.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:1220)
	at io.seata.core.rpc.netty.NettyClientChannelManager.doConnect(NettyClientChannelManager.java:206)
	at io.seata.core.rpc.netty.NettyClientChannelManager.acquireChannel(NettyClientChannelManager.java:103)
	at io.seata.core.rpc.netty.NettyClientChannelManager.reconnect(NettyClientChannelManager.java:175)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient$1.run(AbstractRpcRemotingClient.java:112)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset$$$capture(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
Caused by: io.seata.common.exception.FrameworkException: connect failed, can not connect to services-server.
	at io.seata.core.rpc.netty.RpcClientBootstrap.getNewChannel(RpcClientBootstrap.java:190)
	... 16 common frames omitted
channel valid false,channel:[id: 0x274a8326, L:0.0.0.0/0.0.0.0:53866 ! R:/192.168.88.1:8091]
will destroy channel:[id: 0x274a8326, L:0.0.0.0/0.0.0.0:53866 ! R:/192.168.88.1:8091]
ChannelHandlerContext(TmRpcClient#0, [id: 0x274a8326, L:0.0.0.0/0.0.0.0:53866 ! R:/192.168.88.1:8091]) will closed
0101 can not connect to 192.168.88.1:8091 cause:can not register RM,err:can not connect to services-server.
io.seata.common.exception.FrameworkException: can not register RM,err:can not connect to services-server.
	at io.seata.core.rpc.netty.NettyClientChannelManager.doConnect(NettyClientChannelManager.java:210)
	at io.seata.core.rpc.netty.NettyClientChannelManager.acquireChannel(NettyClientChannelManager.java:103)
	at io.seata.core.rpc.netty.NettyClientChannelManager.reconnect(NettyClientChannelManager.java:175)
	at io.seata.core.rpc.netty.AbstractRpcRemotingClient$1.run(AbstractRpcRemotingClient.java:112)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset$$$capture(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
ChannelHandlerContext(TmRpcClient#0, [id: 0x274a8326, L:0.0.0.0/0.0.0.0:53866 ! R:/192.168.88.1:8091]) will closed
NettyPool create channel to transactionRole:TMROLE,address:192.168.88.1:8091,msg:< RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
will connect to 192.168.88.1:8091
channel inactive: [id: 0xc575d909, L:0.0.0.0/0.0.0.0:53938 ! R:/192.168.88.1:8091]
HV000001: Hibernate Validator 6.0.21.Final
No active profile set, falling back to default profiles: default
BeanFactory id=ae6fb061-e115-313f-925b-40d30572bd04
Bean 'com.cssl.feign.FeignAccountClient' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'spring.cloud.alibaba.seata-io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration' of type [io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataProperties' of type [io.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'io.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [io.seata.spring.boot.autoconfigure.SeataAutoConfiguration$$EnhancerBySpringCGLIB$$a4aee24e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'springUtils' of type [io.seata.spring.boot.autoconfigure.util.SpringUtils] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Automatically configure Seata
The file name of the operation is registry.conf
load ExtConfigurationProvider[null] extension by class[io.seata.spring.boot.autoconfigure.provider.SpringBootConfigurationProvider]
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'configProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'configFileProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigFileProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
The file name of the operation is file.conf
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'serviceProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ServiceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Initializing Global Transaction Clients ... 
Could not found property transport.thread-factory.boss-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.worker-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.share-boss-worker, try to use default value instead.
Bean 'transportProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.TransportProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Could not found property transport.thread-factory.worker-thread-size, try to use default value instead.
RpcClientBootstrap has started
Transaction Manager Client is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Bean 'clientProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ClientProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Async Commit Buffer Limit: 10000
RpcClientBootstrap has started
Resource Manager is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Global Transaction Clients are initialized. 
Bean 'com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration' of type [com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataFeignObjectWrapper' of type [com.alibaba.cloud.seata.feign.SeataFeignObjectWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8111 (http)
Initializing ProtocolHandler ["http-nio-8111"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.39]
Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1580 ms
{dataSource-1} inited
load RegistryProvider[Nacos] extension by class[io.seata.discovery.registry.nacos.NacosRegistryProvider]
will connect to 192.168.88.1:8091
RM will register :jdbc:mysql:///seata_order
NettyPool create channel to transactionRole:RMROLE,address:192.168.88.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
load Codec[SEATA] extension by class[io.seata.codec.seata.SeataCodec]
channel inactive: [id: 0x0ccebda2, L:0.0.0.0/0.0.0.0:53996 ! R:/192.168.88.1:8091]
will connect to 192.168.88.1:8091
NettyPool create channel to transactionRole:TMROLE,address:192.168.88.1:8091,msg:< RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
will connect to 192.168.88.1:8091
channel inactive: [id: 0xdaf12bae, L:0.0.0.0/0.0.0.0:54001 ! R:/192.168.88.1:8091]
HV000001: Hibernate Validator 6.0.21.Final
No active profile set, falling back to default profiles: default
BeanFactory id=ae6fb061-e115-313f-925b-40d30572bd04
Bean 'com.cssl.feign.FeignAccountClient' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'spring.cloud.alibaba.seata-io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration' of type [io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataProperties' of type [io.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'io.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [io.seata.spring.boot.autoconfigure.SeataAutoConfiguration$$EnhancerBySpringCGLIB$$a4aee24e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'springUtils' of type [io.seata.spring.boot.autoconfigure.util.SpringUtils] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Automatically configure Seata
The file name of the operation is registry.conf
load ExtConfigurationProvider[null] extension by class[io.seata.spring.boot.autoconfigure.provider.SpringBootConfigurationProvider]
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'configProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'configFileProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigFileProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
The file name of the operation is file.conf
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'serviceProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ServiceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Initializing Global Transaction Clients ... 
Could not found property transport.thread-factory.boss-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.worker-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.share-boss-worker, try to use default value instead.
Bean 'transportProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.TransportProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Could not found property transport.thread-factory.worker-thread-size, try to use default value instead.
RpcClientBootstrap has started
Transaction Manager Client is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Bean 'clientProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ClientProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Async Commit Buffer Limit: 10000
RpcClientBootstrap has started
Resource Manager is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Global Transaction Clients are initialized. 
Bean 'com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration' of type [com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataFeignObjectWrapper' of type [com.alibaba.cloud.seata.feign.SeataFeignObjectWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8111 (http)
Initializing ProtocolHandler ["http-nio-8111"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.39]
Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1446 ms
{dataSource-1} inited
load RegistryProvider[Nacos] extension by class[io.seata.discovery.registry.nacos.NacosRegistryProvider]
will connect to 192.168.88.1:8091
RM will register :jdbc:mysql:///seata_order
NettyPool create channel to transactionRole:RMROLE,address:192.168.88.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
load Codec[SEATA] extension by class[io.seata.codec.seata.SeataCodec]
register RM success. server version:1.0.0,channel:[id: 0x6ea4c006, L:/192.168.88.1:54160 - R:/192.168.88.1:8091]
register success, cost 46 ms, version:1.0.0,role:RMROLE,channel:[id: 0x6ea4c006, L:/192.168.88.1:54160 - R:/192.168.88.1:8091]
Bean[com.cssl.service.impl.OrderServiceImpl$$EnhancerBySpringCGLIB$$5feeb316] with name [orderServiceImpl] would use interceptor [io.seata.spring.annotation.GlobalTransactionalInterceptor]
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
Initializing ExecutorService 'applicationTaskExecutor'
Initializing ExecutorService 'Nacso-Watch-Task-Scheduler'
Starting ProtocolHandler ["http-nio-8111"]
Tomcat started on port(s): 8111 (http) with context path ''
nacos registry, DEFAULT_GROUP seata-order 172.17.2.52:8111 register finished
Started NacosSeataOrderApplication in 7.869 seconds (JVM running for 8.931)
will connect to 192.168.88.1:8091
NettyPool create channel to transactionRole:TMROLE,address:192.168.88.1:8091,msg:< RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
register success, cost 6 ms, version:1.0.0,role:TMROLE,channel:[id: 0xcc2c4748, L:/192.168.88.1:54177 - R:/192.168.88.1:8091]
HV000001: Hibernate Validator 6.0.21.Final
No active profile set, falling back to default profiles: default
BeanFactory id=ae6fb061-e115-313f-925b-40d30572bd04
Bean 'com.cssl.feign.FeignAccountClient' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'spring.cloud.alibaba.seata-io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration' of type [io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataProperties' of type [io.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'io.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [io.seata.spring.boot.autoconfigure.SeataAutoConfiguration$$EnhancerBySpringCGLIB$$100b4c0b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'springUtils' of type [io.seata.spring.boot.autoconfigure.util.SpringUtils] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Automatically configure Seata
The file name of the operation is registry.conf
load ExtConfigurationProvider[null] extension by class[io.seata.spring.boot.autoconfigure.provider.SpringBootConfigurationProvider]
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'configProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'configFileProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigFileProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
The file name of the operation is file.conf
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'serviceProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ServiceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Initializing Global Transaction Clients ... 
Could not found property transport.thread-factory.boss-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.worker-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.share-boss-worker, try to use default value instead.
Bean 'transportProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.TransportProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Could not found property transport.thread-factory.worker-thread-size, try to use default value instead.
RpcClientBootstrap has started
Transaction Manager Client is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Bean 'clientProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ClientProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Async Commit Buffer Limit: 10000
RpcClientBootstrap has started
Resource Manager is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Global Transaction Clients are initialized. 
Bean 'com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration' of type [com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataFeignObjectWrapper' of type [com.alibaba.cloud.seata.feign.SeataFeignObjectWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8111 (http)
Initializing ProtocolHandler ["http-nio-8111"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.39]
Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1435 ms
{dataSource-1} inited
load RegistryProvider[Nacos] extension by class[io.seata.discovery.registry.nacos.NacosRegistryProvider]
will connect to 192.168.88.1:8091
RM will register :jdbc:mysql:///seata_order
NettyPool create channel to transactionRole:RMROLE,address:192.168.88.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
load Codec[SEATA] extension by class[io.seata.codec.seata.SeataCodec]
register RM success. server version:1.0.0,channel:[id: 0x0e55bd6e, L:/192.168.88.1:54232 - R:/192.168.88.1:8091]
register success, cost 47 ms, version:1.0.0,role:RMROLE,channel:[id: 0x0e55bd6e, L:/192.168.88.1:54232 - R:/192.168.88.1:8091]
Bean[com.cssl.service.impl.OrderServiceImpl$$EnhancerBySpringCGLIB$$ee011c85] with name [orderServiceImpl] would use interceptor [io.seata.spring.annotation.GlobalTransactionalInterceptor]
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
Initializing ExecutorService 'applicationTaskExecutor'
Initializing ExecutorService 'Nacso-Watch-Task-Scheduler'
Starting ProtocolHandler ["http-nio-8111"]
Tomcat started on port(s): 8111 (http) with context path ''
nacos registry, DEFAULT_GROUP seata-order 172.17.2.52:8111 register finished
Started NacosSeataOrderApplication in 7.949 seconds (JVM running for 9.017)
will connect to 192.168.88.1:8091
NettyPool create channel to transactionRole:TMROLE,address:192.168.88.1:8091,msg:< RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
register success, cost 5 ms, version:1.0.0,role:TMROLE,channel:[id: 0xf46e4038, L:/192.168.88.1:54249 - R:/192.168.88.1:8091]
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 4 ms
load ContextCore[null] extension by class[io.seata.core.context.ThreadLocalContextCore]
load TransactionManager[null] extension by class[io.seata.tm.DefaultTransactionManager]
TransactionManager Singleton io.seata.tm.DefaultTransactionManager@41805037
load LoadBalance[null] extension by class[io.seata.discovery.loadbalance.RandomLoadBalance]
Begin new global transaction [192.168.88.1:8091:2074967671]
====开始新增订单====
====结束新增订单====
====开始修改账户====
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Client: seata-account instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=seata-account,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
Using serverListUpdater PollingServerListUpdater
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
DynamicServerListLoadBalancer for client seata-account initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=seata-account,current list of Servers=[172.17.2.52:7111],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:172.17.2.52:7111;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 GMT+08:00 1970;	First connection made: Thu Jan 01 08:00:00 GMT+08:00 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@43395cdf
====结束修改账户====
====开始修改订单====
====结束修改订单====
load [io.seata.rm.datasource.undo.parser.ProtostuffUndoLogParser] class fail. io/protostuff/runtime/RuntimeEnv
load UndoLogParser[jackson] extension by class[io.seata.rm.datasource.undo.parser.JacksonUndoLogParser]
[192.168.88.1:8091:2074967671] commit status: Committed
onMessage:xid=192.168.88.1:8091:2074967671,branchId=2074967673,branchType=AT,resourceId=jdbc:mysql:///seata_order,applicationData=null
Branch committing: 192.168.88.1:8091:2074967671 2074967673 jdbc:mysql:///seata_order null
Branch commit result: PhaseTwo_Committed
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
