HV000001: Hibernate Validator 6.0.21.Final
No active profile set, falling back to default profiles: default
BeanFactory id=ae6fb061-e115-313f-925b-40d30572bd04
Bean 'com.cssl.feign.FeignAccountClient' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'spring.cloud.alibaba.seata-io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration' of type [io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataProperties' of type [io.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'io.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [io.seata.spring.boot.autoconfigure.SeataAutoConfiguration$$EnhancerBySpringCGLIB$$100b4c0b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'springUtils' of type [io.seata.spring.boot.autoconfigure.util.SpringUtils] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Automatically configure Seata
The file name of the operation is registry.conf
load ExtConfigurationProvider[null] extension by class[io.seata.spring.boot.autoconfigure.provider.SpringBootConfigurationProvider]
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'configProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'configFileProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigFileProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
The file name of the operation is file.conf
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'serviceProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ServiceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Initializing Global Transaction Clients ... 
Could not found property transport.thread-factory.boss-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.worker-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.share-boss-worker, try to use default value instead.
Bean 'transportProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.TransportProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Could not found property transport.thread-factory.worker-thread-size, try to use default value instead.
RpcClientBootstrap has started
Transaction Manager Client is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Bean 'clientProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ClientProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Async Commit Buffer Limit: 10000
RpcClientBootstrap has started
Resource Manager is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Global Transaction Clients are initialized. 
Bean 'com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration' of type [com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataFeignObjectWrapper' of type [com.alibaba.cloud.seata.feign.SeataFeignObjectWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8111 (http)
Initializing ProtocolHandler ["http-nio-8111"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.39]
Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1389 ms
{dataSource-1} inited
load RegistryProvider[Nacos] extension by class[io.seata.discovery.registry.nacos.NacosRegistryProvider]
will connect to 192.168.88.1:8091
RM will register :jdbc:mysql:///seata_order
NettyPool create channel to transactionRole:RMROLE,address:192.168.88.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
load Codec[SEATA] extension by class[io.seata.codec.seata.SeataCodec]
register RM success. server version:1.0.0,channel:[id: 0x8d9cb598, L:/192.168.88.1:65003 - R:/192.168.88.1:8091]
register success, cost 43 ms, version:1.0.0,role:RMROLE,channel:[id: 0x8d9cb598, L:/192.168.88.1:65003 - R:/192.168.88.1:8091]
Bean[com.cssl.service.impl.OrderServiceImpl$$EnhancerBySpringCGLIB$$ee011c85] with name [orderServiceImpl] would use interceptor [io.seata.spring.annotation.GlobalTransactionalInterceptor]
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
Initializing ExecutorService 'applicationTaskExecutor'
Initializing ExecutorService 'Nacso-Watch-Task-Scheduler'
Starting ProtocolHandler ["http-nio-8111"]
Tomcat started on port(s): 8111 (http) with context path ''
nacos registry, DEFAULT_GROUP seata-order 192.168.0.103:8111 register finished
Started NacosSeataOrderApplication in 7.673 seconds (JVM running for 8.694)
will connect to 192.168.88.1:8091
NettyPool create channel to transactionRole:TMROLE,address:192.168.88.1:8091,msg:< RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
register success, cost 3 ms, version:1.0.0,role:TMROLE,channel:[id: 0xaf7aecc4, L:/192.168.88.1:65015 - R:/192.168.88.1:8091]
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 5 ms
load ContextCore[null] extension by class[io.seata.core.context.ThreadLocalContextCore]
load TransactionManager[null] extension by class[io.seata.tm.DefaultTransactionManager]
TransactionManager Singleton io.seata.tm.DefaultTransactionManager@62c4e90b
load LoadBalance[null] extension by class[io.seata.discovery.loadbalance.RandomLoadBalance]
Begin new global transaction [192.168.88.1:8091:2074883126]
====开始新增订单====
====结束新增订单====
====开始修改账户====
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Client: seata-account instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=seata-account,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
Using serverListUpdater PollingServerListUpdater
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
DynamicServerListLoadBalancer for client seata-account initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=seata-account,current list of Servers=[192.168.0.103:7111],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.0.103:7111;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 GMT+08:00 1970;	First connection made: Thu Jan 01 08:00:00 GMT+08:00 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@57055bc3
====结束修改账户====
====开始修改订单====
====结束修改订单====
load [io.seata.rm.datasource.undo.parser.ProtostuffUndoLogParser] class fail. io/protostuff/runtime/RuntimeEnv
load UndoLogParser[jackson] extension by class[io.seata.rm.datasource.undo.parser.JacksonUndoLogParser]
[192.168.88.1:8091:2074883126] commit status: Committed
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
onMessage:xid=192.168.88.1:8091:2074883126,branchId=2074883128,branchType=AT,resourceId=jdbc:mysql:///seata_order,applicationData=null
Branch committing: 192.168.88.1:8091:2074883126 2074883128 jdbc:mysql:///seata_order null
Branch commit result: PhaseTwo_Committed
Begin new global transaction [192.168.88.1:8091:2074883129]
====开始新增订单====
====结束新增订单====
====开始修改账户====
====结束修改账户====
====开始修改订单====
====结束修改订单====
[192.168.88.1:8091:2074883129] commit status: Committed
onMessage:xid=192.168.88.1:8091:2074883129,branchId=2074883131,branchType=AT,resourceId=jdbc:mysql:///seata_order,applicationData=null
Branch committing: 192.168.88.1:8091:2074883129 2074883131 jdbc:mysql:///seata_order null
Branch commit result: PhaseTwo_Committed
HV000001: Hibernate Validator 6.0.21.Final
No active profile set, falling back to default profiles: default
BeanFactory id=ae6fb061-e115-313f-925b-40d30572bd04
Bean 'com.cssl.feign.FeignAccountClient' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'spring.cloud.alibaba.seata-io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration' of type [io.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataProperties' of type [io.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'io.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [io.seata.spring.boot.autoconfigure.SeataAutoConfiguration$$EnhancerBySpringCGLIB$$670ca5f4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'springUtils' of type [io.seata.spring.boot.autoconfigure.util.SpringUtils] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Automatically configure Seata
The file name of the operation is registry.conf
load ExtConfigurationProvider[null] extension by class[io.seata.spring.boot.autoconfigure.provider.SpringBootConfigurationProvider]
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'configProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'configFileProperties' of type [io.seata.spring.boot.autoconfigure.properties.registry.ConfigFileProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
The file name of the operation is file.conf
load extConfiguration:FileConfiguration$$EnhancerByCGLIB$$862af1eb
Bean 'serviceProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ServiceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Initializing Global Transaction Clients ... 
Could not found property transport.thread-factory.boss-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.worker-thread-prefix, try to use default value instead.
Could not found property transport.thread-factory.share-boss-worker, try to use default value instead.
Bean 'transportProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.TransportProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Could not found property transport.thread-factory.worker-thread-size, try to use default value instead.
RpcClientBootstrap has started
Transaction Manager Client is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Bean 'clientProperties' of type [io.seata.spring.boot.autoconfigure.properties.file.ClientProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Async Commit Buffer Limit: 10000
RpcClientBootstrap has started
Resource Manager is initialized. applicationId[seata-order] txServiceGroup[bdqn_tx_group]
Global Transaction Clients are initialized. 
Bean 'com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration' of type [com.alibaba.cloud.seata.feign.SeataFeignClientAutoConfiguration$FeignBeanPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'seataFeignObjectWrapper' of type [com.alibaba.cloud.seata.feign.SeataFeignObjectWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8111 (http)
Initializing ProtocolHandler ["http-nio-8111"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.39]
Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 14718 ms
{dataSource-1} inited
load RegistryProvider[Nacos] extension by class[io.seata.discovery.registry.nacos.NacosRegistryProvider]
will connect to 192.168.88.1:8091
RM will register :jdbc:mysql:///seata_order
NettyPool create channel to transactionRole:RMROLE,address:192.168.88.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
load Codec[SEATA] extension by class[io.seata.codec.seata.SeataCodec]
register RM success. server version:1.0.0,channel:[id: 0xd1eb479a, L:/192.168.88.1:52516 - R:/192.168.88.1:8091]
register success, cost 54 ms, version:1.0.0,role:RMROLE,channel:[id: 0xd1eb479a, L:/192.168.88.1:52516 - R:/192.168.88.1:8091]
Bean[com.cssl.service.impl.OrderServiceImpl$$EnhancerBySpringCGLIB$$f1f6ac08] with name [orderServiceImpl] would use interceptor [io.seata.spring.annotation.GlobalTransactionalInterceptor]
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
Initializing ExecutorService 'applicationTaskExecutor'
Initializing ExecutorService 'Nacso-Watch-Task-Scheduler'
will connect to 192.168.88.1:8091
NettyPool create channel to transactionRole:TMROLE,address:192.168.88.1:8091,msg:< RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
register success, cost 5 ms, version:1.0.0,role:TMROLE,channel:[id: 0xfa6238c9, L:/192.168.88.1:52522 - R:/192.168.88.1:8091]
Starting ProtocolHandler ["http-nio-8111"]
Tomcat started on port(s): 8111 (http) with context path ''
nacos registry, DEFAULT_GROUP seata-order 192.168.0.103:8111 register finished
Started NacosSeataOrderApplication in 22.146 seconds (JVM running for 24.197)
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 6 ms
load ContextCore[null] extension by class[io.seata.core.context.ThreadLocalContextCore]
load TransactionManager[null] extension by class[io.seata.tm.DefaultTransactionManager]
TransactionManager Singleton io.seata.tm.DefaultTransactionManager@2a9a23ed
load LoadBalance[null] extension by class[io.seata.discovery.loadbalance.RandomLoadBalance]
Begin new global transaction [192.168.88.1:8091:2074883132]
====开始新增订单====
====结束新增订单====
====开始修改账户====
channel [id: 0xd1eb479a, L:/192.168.88.1:52516 - R:/192.168.88.1:8091] read idle.
channel [id: 0xfa6238c9, L:/192.168.88.1:52522 - R:/192.168.88.1:8091] read idle.
will destroy channel:[id: 0xd1eb479a, L:/192.168.88.1:52516 - R:/192.168.88.1:8091]
will destroy channel:[id: 0xfa6238c9, L:/192.168.88.1:52522 - R:/192.168.88.1:8091]
ChannelHandlerContext(RmRpcClient#0, [id: 0xd1eb479a, L:/192.168.88.1:52516 - R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(TmRpcClient#0, [id: 0xfa6238c9, L:/192.168.88.1:52522 - R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(RmRpcClient#0, [id: 0xd1eb479a, L:/192.168.88.1:52516 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(TmRpcClient#0, [id: 0xfa6238c9, L:/192.168.88.1:52522 ! R:/192.168.88.1:8091]) will closed
return to pool, rm channel:[id: 0xd1eb479a, L:/192.168.88.1:52516 ! R:/192.168.88.1:8091]
return to pool, rm channel:[id: 0xfa6238c9, L:/192.168.88.1:52522 ! R:/192.168.88.1:8091]
channel valid false,channel:[id: 0xd1eb479a, L:/192.168.88.1:52516 ! R:/192.168.88.1:8091]
channel valid false,channel:[id: 0xfa6238c9, L:/192.168.88.1:52522 ! R:/192.168.88.1:8091]
will destroy channel:[id: 0xd1eb479a, L:/192.168.88.1:52516 ! R:/192.168.88.1:8091]
will destroy channel:[id: 0xfa6238c9, L:/192.168.88.1:52522 ! R:/192.168.88.1:8091]
ChannelHandlerContext(RmRpcClient#0, [id: 0xd1eb479a, L:/192.168.88.1:52516 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(TmRpcClient#0, [id: 0xfa6238c9, L:/192.168.88.1:52522 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(RmRpcClient#0, [id: 0xd1eb479a, L:/192.168.88.1:52516 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(TmRpcClient#0, [id: 0xfa6238c9, L:/192.168.88.1:52522 ! R:/192.168.88.1:8091]) will closed
channel inactive: [id: 0xd1eb479a, L:/192.168.88.1:52516 ! R:/192.168.88.1:8091]
channel inactive: [id: 0xfa6238c9, L:/192.168.88.1:52522 ! R:/192.168.88.1:8091]
channel valid false,channel:[id: 0xd1eb479a, L:/192.168.88.1:52516 ! R:/192.168.88.1:8091]
will destroy channel:[id: 0xd1eb479a, L:/192.168.88.1:52516 ! R:/192.168.88.1:8091]
channel valid false,channel:[id: 0xfa6238c9, L:/192.168.88.1:52522 ! R:/192.168.88.1:8091]
ChannelHandlerContext(RmRpcClient#0, [id: 0xd1eb479a, L:/192.168.88.1:52516 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(RmRpcClient#0, [id: 0xd1eb479a, L:/192.168.88.1:52516 ! R:/192.168.88.1:8091]) will closed
will destroy channel:[id: 0xfa6238c9, L:/192.168.88.1:52522 ! R:/192.168.88.1:8091]
ChannelHandlerContext(TmRpcClient#0, [id: 0xfa6238c9, L:/192.168.88.1:52522 ! R:/192.168.88.1:8091]) will closed
ChannelHandlerContext(TmRpcClient#0, [id: 0xfa6238c9, L:/192.168.88.1:52522 ! R:/192.168.88.1:8091]) will closed
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Client: seata-account instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=seata-account,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
Using serverListUpdater PollingServerListUpdater
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
DynamicServerListLoadBalancer for client seata-account initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=seata-account,current list of Servers=[192.168.0.103:7111],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.0.103:7111;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 GMT+08:00 1970;	First connection made: Thu Jan 01 08:00:00 GMT+08:00 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@7a17702f
Flipping property: seata-account.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
====结束修改账户====
====开始修改订单====
will connect to 192.168.88.1:8091
NettyPool create channel to transactionRole:TMROLE,address:192.168.88.1:8091,msg:< RegisterTMRequest{applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
register success, cost 5 ms, version:1.0.0,role:TMROLE,channel:[id: 0xb534c061, L:/192.168.88.1:52775 - R:/192.168.88.1:8091]
====结束修改订单====
will connect to 192.168.88.1:8091
RM will register :jdbc:mysql:///seata_order
NettyPool create channel to transactionRole:RMROLE,address:192.168.88.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql:///seata_order', applicationId='seata-order', transactionServiceGroup='bdqn_tx_group'} >
register RM success. server version:1.0.0,channel:[id: 0x1a82e8d4, L:/192.168.88.1:52776 - R:/192.168.88.1:8091]
register success, cost 4 ms, version:1.0.0,role:RMROLE,channel:[id: 0x1a82e8d4, L:/192.168.88.1:52776 - R:/192.168.88.1:8091]
[192.168.88.1:8091:2074883132] rollback status: Finished
Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.transaction.TransactionSystemException: Could not commit JDBC transaction; nested exception is java.sql.SQLException: io.seata.core.exception.RmTransactionException: Response[ TransactionException[Could not found global transaction xid = 192.168.88.1:8091:2074883132] ]] with root cause
io.seata.core.exception.RmTransactionException: Response[ TransactionException[Could not found global transaction xid = 192.168.88.1:8091:2074883132] ]
	at io.seata.rm.AbstractResourceManager.branchRegister(AbstractResourceManager.java:69)
	at io.seata.rm.DefaultResourceManager.branchRegister(DefaultResourceManager.java:96)
	at io.seata.rm.datasource.ConnectionProxy.register(ConnectionProxy.java:233)
	at io.seata.rm.datasource.ConnectionProxy.processGlobalTransactionCommit(ConnectionProxy.java:211)
	at io.seata.rm.datasource.ConnectionProxy.doCommit(ConnectionProxy.java:190)
	at io.seata.rm.datasource.ConnectionProxy.lambda$commit$0(ConnectionProxy.java:178)
	at io.seata.rm.datasource.ConnectionProxy$$Lambda$610/1972183424.call(Unknown Source)
	at io.seata.rm.datasource.ConnectionProxy$LockRetryPolicy.execute(ConnectionProxy.java:283)
	at io.seata.rm.datasource.ConnectionProxy.commit(ConnectionProxy.java:177)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doCommit(DataSourceTransactionManager.java:329)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:633)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:386)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at io.seata.spring.annotation.GlobalTransactionalInterceptor$1.execute(GlobalTransactionalInterceptor.java:109)
	at io.seata.tm.api.TransactionalTemplate.execute(TransactionalTemplate.java:64)
	at io.seata.spring.annotation.GlobalTransactionalInterceptor.handleGlobalTransaction(GlobalTransactionalInterceptor.java:106)
	at io.seata.spring.annotation.GlobalTransactionalInterceptor.invoke(GlobalTransactionalInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.cssl.service.impl.OrderServiceImpl$$EnhancerBySpringCGLIB$$f1f6ac08.saveOrder(<generated>)
	at com.cssl.controller.OrderController.takeOrder(OrderController.java:19)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
